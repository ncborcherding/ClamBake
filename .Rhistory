################
seurat.merge <- readRDS("./data/seurat.merged.filtered.rds")
DimPlot(seurat.merge)
library(Seurat)
DimPlot(seurat.merge)
seurat.merge$donor <- stringr::str_split(seurat.merge$orig.ident, "_", simplify = TRUE)[,1]
seurat.merge$timepoint <- stringr::str_split(seurat.merge$orig.ident, "_", simplify = TRUE)[,2]
seurat.merge$timepoint <- stringr::str_remove(seurat.merge$timepoint, ".1")
seurat.merge$timepoint <- stringr::str_remove(seurat.merge$timepoint, ".2")
annotations <- readxl::read_xlsx("annotations.xlsx")
meta <- seurat.merge[[]]
meta$barcodes <- rownames(meta)
meta <- merge(meta, annotations, by.x = "snn.leiden", by.y = "Cluster")
barcodes <- meta$barcodes
meta <- data.frame(celltype = meta[,"Cell.Type"], row.names = barcodes)
seurat.merge <- AddMetaData(seurat.merge, meta)
get.medians<- function(input, group2) {
input <- cbind.data.frame(group2, input)
num <- ncol(input)-1
med <- input %>%
group_by(group2) %>%
summarise(across(seq_len(all_of(num)), median))
med <- as.data.frame(med[,seq_len(num) + 1])
rownames(med) <- paste0("median.", unique(group2))
med <- as.data.frame(t(med))
return(med)
}
get.means<- function(input, group2) {
input <- cbind.data.frame(group2, input)
num <- ncol(input)-1
med <- input %>%
group_by(group2) %>%
summarise(across(seq_len(all_of(num)), mean))
med <- as.data.frame(med[,seq_len(num) + 1])
rownames(med) <- paste0("mean.", unique(group2))
med <- as.data.frame(t(med))
return(med)
}
ES <- readRDS("overall.enrichment.scores.rds")
meta <- seurat.merge[[]]
meta$barcode = rownames(meta)
#ES <- ES[rownames(ES) %in% c(rownames(meta), rownames(Precluster)),]
ES <- merge(meta, ES, by = 0)
ES <- ES[ES$donor %in% c("Pt50", "Pt51"),]
timepoint <- ES$timepoint
clusters <- unique(ES$celltype)
i <- 1
tmp <- ES[ES$celltype == clusters[i],]
input <- select_if(tmp, is.numeric)
library(dplyr)
input <- select_if(tmp, is.numeric)
timepoint <- tmp$timepoint
medians <- get.medians(input[,9:ncol(input)], timepoint)
View(medians)
medians <- medians[,1]-medians[,2]
means <- get.means(input[,9:ncol(input)], timepoint)
means <- means[,1]-means[,2]
output <- NULL
out <- lapply(input[,9:ncol(input)], function(x) kruskal.test(x ~ timepoint))
for (x in seq_along(out)) {
Chi.squared <- out[[x]]$statistic
pval <- out[[x]]$p.value
output <- rbind(output, c(Chi.squared, pval))
}
output <- as.data.frame(output)
colnames(output) <- c("Chi.square", "p.value")
rownames(output) <- colnames(input[,9:ncol(input)])
output$FDR <- p.adjust(output$p.value)
output <- cbind.data.frame(output, medians)
output <- cbind.data.frame(output, means)
View(output)
output <- output[grepl("HALLMARK|KEGG|BIOCARTA",rownames(output)),]
View(output)
output$medians <- scale(output$medians)
output$means <- scale(output$means)
for(i in seq_along(clusters)) {
tmp <- ES[ES$celltype == clusters[i],]
input <- select_if(tmp, is.numeric)
timepoint <- tmp$timepoint
medians <- get.medians(input[,9:ncol(input)], timepoint)
medians <- medians[,1]-medians[,2]
means <- get.means(input[,9:ncol(input)], timepoint)
means <- means[,1]-means[,2]
output <- NULL
out <- lapply(input[,9:ncol(input)], function(x) kruskal.test(x ~ timepoint))
for (x in seq_along(out)) {
Chi.squared <- out[[x]]$statistic
pval <- out[[x]]$p.value
output <- rbind(output, c(Chi.squared, pval))
}
output <- as.data.frame(output)
colnames(output) <- c("Chi.square", "p.value")
rownames(output) <- colnames(input[,9:ncol(input)])
output$FDR <- p.adjust(output$p.value)
output <- cbind.data.frame(output, medians)
output <- cbind.data.frame(output, means)
output$medians <- scale(output$medians)
output$means <- scale(output$means)
output <- output[grepl("HALLMARK|KEGG|BIOCARTA",rownames(output)),]
write.csv(output, paste0(clusters[i], "_gseaResults.csv"))
}
dat <- read.table("trust4_tcga_deidentified_report.tsv")
dat <- dat[-which(nchar(dat$V3) > 60),]
heavy <- dat[dat$V2 == "IGH",]
IGK <- dat[dat$V2 == "IGK",]
IGL <- dat[dat$V2 == "IGL",]
heavy <- unique(heavy$V3)
light <- c(unique(IGK$V3), unique(IGL$V3))
set.seed(42)
heavy <- heavy[sample(length(heavy), 600000)]
light <- light[sample(length(light), 600000)]
library(keras)
tensorflow::tf$compat$v1$disable_eager_execution()
dat <- read.table("trust4_tcga_deidentified_report.tsv")
dat <- dat[-which(nchar(dat$V3) > 60),]
heavy <- dat[dat$V2 == "IGH",]
IGK <- dat[dat$V2 == "IGK",]
IGL <- dat[dat$V2 == "IGL",]
heavy <- unique(heavy$V3)
light <- c(unique(IGK$V3), unique(IGL$V3))
set.seed(42)
heavy <- heavy[sample(length(heavy), 600000)]
light <- light[sample(length(light), 600000)]
m <- 1
load("./Trex.Data.rda")
reference <- Trex.Data[[1]]
chain <- list(heavy, light)
"%!in%" <- Negate("%in%")
aa.int.vals <- Trex.Data[[1]]$aa
names(aa.int.vals) <- 1:20
names(chain) <- c("heavy", "light")
intermediate.value <- rep(0,21)
normalize <- function(x)
{
(x- min(x)) /(max(x)-min(x))
}
AA.properties <- c("AF", "KF", "both")
m <- 1
COI <- chain[[m]]
dir.create(paste0(AA.properties[n], names(chain)[m]))
n <- 1
dir.create(paste0(AA.properties[n], names(chain)[m]))
AA.ref <- AA.properties[n]
array.reshape <- NULL
j <- 1
tmp.CDR <- COI[j]
refer <- unlist(strsplit(tmp.CDR, ""))
refer <- c(refer, rep(NA, 70 - length(refer)))
int <- reference[match(refer, reference$aa),]
int
if (AA.ref == "both") {
col.ref <- grep(tolower("AF|KF"), colnames(reference))
} else {
col.ref <- grep(tolower(paste(AA.ref, collapse = "|")), colnames(reference))
}
int <- int[,col.ref]
int
tmp.CDR <- COI[j]
refer <- unlist(strsplit(tmp.CDR, ""))
refer <- c(refer, rep(NA, 70 - length(refer)))
int <- reference[match(refer, reference$aa),]
if (AA.ref == "both") {
col.ref <- grep(tolower("AF|KF"), colnames(reference))
} else {
col.ref <- grep(tolower(paste(AA.ref, collapse = "|")), colnames(reference))
}
int <- int[,col.ref]
int
x <- array_reshape(as.matrix(int)
)
x <- array_reshape(as.matrix(int), length(col.ref)*70)
library(reticulate)
Sys.setenv(RETICULATE_PYTHON = "/Users/ncborch/Library/r-miniconda-arm64/envs/r-reticulate/bin/python")
use_condaenv(condaenv = "r-reticulate", required = TRUE)
array_reshape(as.matrix(int), length(col.ref)*70)
x <- array_reshape(as.matrix(int), length(col.ref)*70)
x
as.vector(int)
y <- as.vector(int)
y == x
y <- as.vector(as.matrix(int))
y == x
y
x[1:10]
y[1:10]
y <- vector(as.matrix(int))
x <- 1
if (x == length(the.splits)) {
chain.seqs <- COI[the.splits[x]:length.max]
} else {
chain.seqs <- COI[the.splits[x]:(the.splits[x+1]-1)]
}
the.splits <- seq(1, length(COI), by=10000)
if (x == length(the.splits)) {
chain.seqs <- COI[the.splits[x]:length.max]
} else {
chain.seqs <- COI[the.splits[x]:(the.splits[x+1]-1)]
}
tmp.CDR <- chain.seqs[j]
tmp.CDR <- COI[j]
refer <- unlist(strsplit(tmp.CDR, ""))
refer <- c(refer, rep(NA, 70 - length(refer)))
int <- reference[match(refer, reference$aa),]
if (AA.ref == "both") {
col.ref <- grep(tolower("AF|KF"), colnames(reference))
} else {
col.ref <- grep(tolower(paste(AA.ref, collapse = "|")), colnames(reference))
}
int <- int[,col.ref]
array.reshape <- rbind(array.reshape,array_reshape(as.matrix(int), length(col.ref)*70))
View(array.reshape)
array.reshape <- NULL
the.splits <- seq(1, length(COI), by=10000)
for (x in seq_along(the.splits)) {
if (x == length(the.splits)) {
chain.seqs <- COI[the.splits[x]:length.max]
} else {
chain.seqs <- COI[the.splits[x]:(the.splits[x+1]-1)]
}
for (j in seq_len(length(chain.seqs))) {
tmp.CDR <- chain.seqs[j]
tmp.CDR <- COI[j]
refer <- unlist(strsplit(tmp.CDR, ""))
refer <- c(refer, rep(NA, 70 - length(refer)))
int <- reference[match(refer, reference$aa),]
if (AA.ref == "both") {
col.ref <- grep(tolower("AF|KF"), colnames(reference))
} else {
col.ref <- grep(tolower(paste(AA.ref, collapse = "|")), colnames(reference))
}
int <- int[,col.ref]
array.reshape <- rbind(array.reshape,array_reshape(as.matrix(int), length(col.ref)*70))
}
saveRDS(array.reshape, paste0(AA.properties[n], ".", names(chain)[m], "/array.reshape.", x, ".rds"))
}
if (x == length(the.splits)) {
chain.seqs <- COI[the.splits[x]:length.max]
} else {
chain.seqs <- COI[the.splits[x]:(the.splits[x+1]-1)]
}
array.reshape <- NULL
tmp.CDR <- chain.seqs[j]
for (j in seq_len(length(chain.seqs))) {
tmp.CDR <- chain.seqs[j]
tmp.CDR <- COI[j]
refer <- unlist(strsplit(tmp.CDR, ""))
refer <- c(refer, rep(NA, 70 - length(refer)))
int <- reference[match(refer, reference$aa),]
if (AA.ref == "both") {
col.ref <- grep(tolower("AF|KF"), colnames(reference))
} else {
col.ref <- grep(tolower(paste(AA.ref, collapse = "|")), colnames(reference))
}
int <- int[,col.ref]
array.reshape <- rbind(array.reshape,array_reshape(as.matrix(int), length(col.ref)*70))
}
array.reshape
saveRDS(array.reshape, paste0(AA.properties[n], ".", names(chain)[m], "/array.reshape.", x, ".rds"))
dir.create(paste0(AA.properties[n], ".", names(chain)[m]))
saveRDS(array.reshape, paste0(AA.properties[n], ".", names(chain)[m], "/array.reshape.", x, ".rds"))
for (n in seq_along(AA.properties)) {
dir.create(paste0(AA.properties[n], ".", names(chain)[m]))
AA.ref <- AA.properties[n]
array.reshape <- NULL
the.splits <- seq(1, length(COI), by=10000)
for (x in seq_along(the.splits)) {
if (x == length(the.splits)) {
chain.seqs <- COI[the.splits[x]:length.max]
} else {
chain.seqs <- COI[the.splits[x]:(the.splits[x+1]-1)]
}
for (j in seq_len(length(chain.seqs))) {
tmp.CDR <- chain.seqs[j]
tmp.CDR <- COI[j]
refer <- unlist(strsplit(tmp.CDR, ""))
refer <- c(refer, rep(NA, 70 - length(refer)))
int <- reference[match(refer, reference$aa),]
if (AA.ref == "both") {
col.ref <- grep(tolower("AF|KF"), colnames(reference))
} else {
col.ref <- grep(tolower(paste(AA.ref, collapse = "|")), colnames(reference))
}
int <- int[,col.ref]
array.reshape <- rbind(array.reshape,array_reshape(as.matrix(int), length(col.ref)*70))
}
saveRDS(array.reshape, paste0(AA.properties[n], ".", names(chain)[m], "/array.reshape.", x, ".rds"))
}
}
AA.ref <- AA.properties[n]
the.splits <- seq(1, length(COI), by=10000)
for (x in seq_along(the.splits)) {
if (x == length(the.splits)) {
chain.seqs <- COI[the.splits[x]:length.max]
} else {
chain.seqs <- COI[the.splits[x]:(the.splits[x+1]-1)]
}
array.reshape <- NULL
for (j in seq_len(length(chain.seqs))) {
tmp.CDR <- chain.seqs[j]
tmp.CDR <- COI[j]
refer <- unlist(strsplit(tmp.CDR, ""))
refer <- c(refer, rep(NA, 70 - length(refer)))
int <- reference[match(refer, reference$aa),]
if (AA.ref == "both") {
col.ref <- grep(tolower("AF|KF"), colnames(reference))
} else {
col.ref <- grep(tolower(paste(AA.ref, collapse = "|")), colnames(reference))
}
int <- int[,col.ref]
array.reshape <- rbind(array.reshape,array_reshape(as.matrix(int), length(col.ref)*70))
}
saveRDS(array.reshape, paste0(AA.properties[n], ".", names(chain)[m], "/array.reshape.", x, ".rds"))
}
length.max <- length(COI)
if (x == length(the.splits)) {
chain.seqs <- COI[the.splits[x]:length.max]
} else {
chain.seqs <- COI[the.splits[x]:(the.splits[x+1]-1)]
}
array.reshape <- NULL
for (j in seq_len(length(chain.seqs))) {
tmp.CDR <- chain.seqs[j]
tmp.CDR <- COI[j]
refer <- unlist(strsplit(tmp.CDR, ""))
refer <- c(refer, rep(NA, 70 - length(refer)))
int <- reference[match(refer, reference$aa),]
if (AA.ref == "both") {
col.ref <- grep(tolower("AF|KF"), colnames(reference))
} else {
col.ref <- grep(tolower(paste(AA.ref, collapse = "|")), colnames(reference))
}
int <- int[,col.ref]
array.reshape <- rbind(array.reshape,array_reshape(as.matrix(int), length(col.ref)*70))
}
saveRDS(array.reshape, paste0(AA.properties[n], ".", names(chain)[m], "/array.reshape.", x, ".rds"))
n <- 2
dir.create(paste0(AA.properties[n], ".", names(chain)[m]))
AA.ref <- AA.properties[n]
length.max <- length(COI)
the.splits <- seq(1, length(COI), by=10000)
for (x in seq_along(the.splits)) {
if (x == length(the.splits)) {
chain.seqs <- COI[the.splits[x]:length.max]
} else {
chain.seqs <- COI[the.splits[x]:(the.splits[x+1]-1)]
}
array.reshape <- NULL
for (j in seq_len(length(chain.seqs))) {
tmp.CDR <- chain.seqs[j]
tmp.CDR <- COI[j]
refer <- unlist(strsplit(tmp.CDR, ""))
refer <- c(refer, rep(NA, 70 - length(refer)))
int <- reference[match(refer, reference$aa),]
if (AA.ref == "both") {
col.ref <- grep(tolower("AF|KF"), colnames(reference))
} else {
col.ref <- grep(tolower(paste(AA.ref, collapse = "|")), colnames(reference))
}
int <- int[,col.ref]
array.reshape <- rbind(array.reshape,array_reshape(as.matrix(int), length(col.ref)*70))
}
saveRDS(array.reshape, paste0(AA.properties[n], ".", names(chain)[m], "/array.reshape.", x, ".rds"))
}
list <- readRDS("./processedData/PB_seuratObjects.rds")
list <- list %>%
Seurat::NormalizeData(verbose = FALSE) %>%
FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
ScaleData(verbose = FALSE) %>%
RunPCA(pc.genes = pbmc@var.genes, npcs = 30, verbose = FALSE) %>%
RunHarmony(c("orig.ident")) %>%
FindNeighbors(reduction = "harmony", dims = 1:50) %>%
RunUMAP(reduction = "harmony",
dims = 1:50,
n.epochs = 500) %>%
FindClusters(resolution = 1,
algorithm = 3) %>%
identity()
library(Seurat)
library(harmony)
list <- list %>%
Seurat::NormalizeData(verbose = FALSE) %>%
FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
ScaleData(verbose = FALSE) %>%
RunPCA(pc.genes = pbmc@var.genes, npcs = 30, verbose = FALSE) %>%
RunHarmony(c("orig.ident")) %>%
FindNeighbors(reduction = "harmony", dims = 1:50) %>%
RunUMAP(reduction = "harmony",
dims = 1:50,
n.epochs = 500) %>%
FindClusters(resolution = 1,
algorithm = 3) %>%
identity()
list <- list %>%
Seurat::NormalizeData(verbose = FALSE) %>%
FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
ScaleData(verbose = FALSE) %>%
RunPCA(pc.genes = pbmc@var.genes, npcs = 50, verbose = FALSE) %>%
RunHarmony(c("orig.ident")) %>%
FindNeighbors(reduction = "harmony", dims = 1:50) %>%
RunUMAP(reduction = "harmony",
dims = 1:50,
n.epochs = 500) %>%
FindClusters(resolution = 1,
algorithm = 3) %>%
identity()
DimPlot(list, group.by = "cloneType") + scale_color_manual(values = rev(viridis_pal(option = "B")(length(unique(list$cloneType)))))
library(ggplot2)
DimPlot(list, group.by = "cloneType") + scale_color_manual(values = rev(viridis_pal(option = "B")(length(unique(list$cloneType)))))
library(viridis)
DimPlot(list, group.by = "cloneType") + scale_color_manual(values = rev(viridis_pal(option = "B")(length(unique(list$cloneType)))))
list <- readRDS("./processedData/PB_seuratObjects.rds")
cells.to.remove <- unique(c(which(nchar(stringr::str_split(list$CTaa, "_", simplify = TRUE)[,1]) > 50), #TRA chain > 50 aa
which(nchar(stringr::str_split(list$CTaa, "_", simplify = TRUE)[,2]) > 50))) # TRB chain > 50 aa residues
if(length(cells.to.remove) > 0) {
cells <- rownames(list[[]])
cells <- cells[-cells.to.remove]
list <- subset(list, cells = cells)
}
library(Trex)
conga <- CoNGAfy(list,
meta.carry = c("CTaa", "CTgene"))
meta <- list[[]]
clone.count <- meta %>%
group_by(CTaa, TCRB.epitope, TCRA.epitope) %>%
summarise(n = n()) %>%
as.data.frame()
library(dplyr)
clone.count <- meta %>%
group_by(CTaa, TCRB.epitope, TCRA.epitope) %>%
summarise(n = n()) %>%
as.data.frame()
clone.count <- meta %>%
group_by(CTaa) %>%
summarise(n = n()) %>%
as.data.frame()
ID <- clone.count$CTaa
clone.count <- clone.count[,-1]
rownames(clone.count) <- ID
meta <- list[[]]
clone.count <- meta %>%
group_by(CTaa) %>%
summarise(n = n()) %>%
as.data.frame()
View(clone.count)
ID <- clone.count$CTaa
clone.count <- as.data.frame(clone.count[,-1])
rownames(clone.count) <- ID
View(clone.count)
clone.count <- meta %>%
group_by(CTaa) %>%
summarise(n = n()) %>%
as.data.frame()
ID <- clone.count$CTaa
clone.count <- data.frame(clone.count[,-1])
rownames(clone.count) <- ID
View(clone.count)
clone.count <- meta %>%
group_by(CTaa) %>%
summarise(n = n()) %>%
as.data.frame()
ID <- clone.count$CTaa
clone.count <- data.frame(count = clone.count[,-1])
rownames(clone.count) <- ID
rownames(clone.count) <- ID
row.names(clone.count) <- ID
id
ID
missing(ID)
row.names(clone.count) <- ID
row.names(clone.count) <- ID
rownames(clone.count) <- ID
clone.count <- meta %>%
group_by(CTaa) %>%
summarise(n = n()) %>%
as.data.frame()
clone.count <- meta %>%
group_by(CTaa) %>%
summarise(n = n()) %>%
na.omit()
clone.count <- meta %>%
group_by(CTaa) %>%
summarise(n = n()) %>%
na.omit() %>%
as.data.frame()
ID <- clone.count$CTaa
clone.count <- data.frame(count = clone.count[,-1])
rownames(clone.count) <- ID
conga <- AddMetaData(conga, clone.count)
conga <- runTrex(conga,
chains = "TRA",
aa.properties = "KF",
reduction.name = "TRA.KF")
conga <- runTrex(conga,
chains = "TRA",
AA.properties = "KF",
reduction.name = "TRA.KF")
conga <- runTrex(conga,
chains = "TRB",
AA.properties = "KF",
reduction.name = "TRB.KF")
saveRDS(conga, "./processedData/conga_PB_seuratObject.rds")
conga <- conga %>%
NormalizeData(verbose = FALSE) %>%
FindVariableFeatures()
conga <- Trex::quietTCRgenes(conga)
conga <- ScaleData(conga, verbose = FALSE)
conga <- RunPCA(conga, features = VariableFeatures(conga))
dem.tmp <- c(1:dimen, 31:(31+dimen-1), 61:(61+dimen-1))
saveRDS(conga, "./processedData/conga_PB_seuratObject.rds")
BiocManager::install("MIMOSA")
BiocManager::install("mumosa")
devtools::install_github("LTLA/mumosa")
