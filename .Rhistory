y <- hclust(x, method = "ward.D2")
View(y)
plot(error.freq.hclust, hang = -1)
plot(y, hang = -1)
rect.hclust(y, 3)
pdf("plot.pdf", height = 20, width = 10)
plot(y, hang = -1)
rect.hclust(y, 3)
dev.off()
cutree(y, 4)
clusters <- as.data.frame(cutree(y, 4))
View(clusters)
clusters <- data.frame(Ward.cluster = cutree(y, 4))
View(clusters)
View(clusters)
View(clusters)
clusters$Ward.cluster[clusters$Ward.cluster == 1] <- "K1"
clusters$Ward.cluster[clusters$Ward.cluster == 2] <- "K2"
clusters$Ward.cluster[clusters$Ward.cluster == 3] <- "K4"
clusters$Ward.cluster[clusters$Ward.cluster == 4] <- "K3"
heir.cluster <- hclust(calc.dist, method = "complete")
calc.dist<- dist(t(summary[,2:43]))
heir.cluster <- hclust(calc.dist, method = "complete")
clusters <- data.frame(Ward.cluster = cutree(heir.cluster, 4))
pdf("plot.pdf", height = 10, wdith = 10)
pdf("plot.pdf", height = 10, width = 10)
plot(heir.cluster, hang = -1)
rect.hclust(heir.cluster, 4)
dev.off()
calc.dist<- dist(t(summary[,2:43]))
heir.cluster <- hclust(calc.dist, method = "complete")
pdf("plot.pdf", height = 10, width = 10)
plot(heir.cluster, hang = -1)
rect.hclust(heir.cluster, 4)
dev.off()
pdf("plot.pdf", height = 10, width = 10)
plot(heir.cluster, hang = -1)
rect.hclust(heir.cluster, 5)
dev.off()
pdf("plot.pdf", height = 10, width = 10)
plot(heir.cluster, hang = -1)
rect.hclust(heir.cluster, 6)
dev.off()
heir.cluster <- hclust(calc.dist, method = "complete")
clusters <- data.frame(Ward.cluster = cutree(heir.cluster, 6))
View(clusters)
clusters$Ward.cluster[clusters$Ward.cluster %in% c(1,5,6)] <- "K1"
clusters$Ward.cluster[clusters$Ward.cluster == 2] <- "K2"
clusters$Ward.cluster[clusters$Ward.cluster == 3] <- "K4"
clusters$Ward.cluster[clusters$Ward.cluster == 4] <- "K3"
View(clusters)
View(summary)
output <- t(summary[,2:43])
View(output)
merge(output, clusters, by = 0)
output <- merge(output, clusters, by = 0)
View(output)
colnames(output)[1] <- "Gene.Sets"
write.csv(output, "./output/GSEA.heatmap.csv")
summary <- ES2 %>%
group_by(seurat_clusters, timepoint) %>%
summarise(across(pathways.intersect, median))
for(i in 3:44) {
summary[,i] <- normalize(summary[,i])
}
summary <- as.data.frame(summary)
colnames(summary) <- stringr::str_remove_all(colnames(summary), "_UCell")
melt.summary <- reshape2::melt(summary, id.vars = c("seurat_clusters", "timepoint"))
melt.summary$timepoint <- factor(melt.summary$timepoint, levels = c("d28", "d60", "d110", "d201"))
write.csv(summary, "./output/GSEA.Dynamics.heatmap.csv")
run_list <- list.files("./Volumes/GoogleDrive/Other\ computers/iMac/utility/data/SequencingRuns", pattern = "filtered_contig_annotations.csv")
run_list <- list.files("./Volumes/GoogleDrive/Other\ computers/iMac/utility/data/SequencingRuns/", pattern = "filtered_contig_annotations.csv")
run_list <- list.files("/Volumes/GoogleDrive/Other\ computers/iMac/utility/data/SequencingRuns/", pattern = "filtered_contig_annotations.csv")
run_list <- list.files("/Volumes/GoogleDrive/Other\ computers/iMac/utility/data/SequencingRuns/")
file_list <- NULL
paste0("/Volumes/GoogleDrive/Other\ computers/iMac/utility/data/SequencingRuns/", run_list[i])
i <- 1
paste0("/Volumes/GoogleDrive/Other\ computers/iMac/utility/data/SequencingRuns/", run_list[i])
x <- list.files(paste0("/Volumes/GoogleDrive/Other\ computers/iMac/utility/data/SequencingRuns/", run_list[i]), pattern = "contig")
file_list <- NULL
for(i in seq_along(run_list)) {
x <- list.files(paste0("/Volumes/GoogleDrive/Other\ computers/iMac/utility/data/SequencingRuns/", run_list[i]), pattern = "contig")
if(length(x) == 1) {
file <- paste0("./data/sequencingRuns/", run_list[i], "/", x)a
for(i in seq_along(run_list)) {
x <- list.files(paste0("/Volumes/GoogleDrive/Other\ computers/iMac/utility/data/SequencingRuns/", run_list[i]), pattern = "contig")
if(length(x) == 1) {
file <- paste0("./data/sequencingRuns/", run_list[i], "/", x)
file_list <- c(file_list, file)
}
}
library(scRepertoire)
run_list <- list.files("/Volumes/GoogleDrive/Other\ computers/iMac/utility/data/SequencingRuns/")
file_list <- NULL
for(i in seq_along(run_list)) {
x <- list.files(paste0("/Volumes/GoogleDrive/Other\ computers/iMac/utility/data/SequencingRuns/", run_list[i]), pattern = "contig")
if(length(x) == 1) {
file <- paste0("./data/sequencingRuns/", run_list[i], "/", x)
file_list <- c(file_list, file)
}
}
recovered.runs <- stringr::str_split(file_list, "/", simplify = TRUE)[,4]
contig.list <- lapply(file_list, read.csv)
file_list
file_list <- NULL
for(i in seq_along(run_list)) {
x <- list.files(paste0("/Volumes/GoogleDrive/Other\ computers/iMac/utility/data/SequencingRuns/", run_list[i]), pattern = "contig")
if(length(x) == 1) {
file <- paste0("/Volumes/GoogleDrive/Other\ computers/iMac/utility/data/SequencingRuns/", run_list[i], "/", x)
file_list <- c(file_list, file)
}
}
recovered.runs <- stringr::str_split(file_list, "/", simplify = TRUE)[,4]
contig.list <- lapply(file_list, read.csv)
i <- 1
TRB.chain <- contig.list[[i]][contig.list[[i]]$chain == "TRB",]
TRA.chain <- contig.list[[i]][contig.list[[i]]$chain == "TRA",]
table(TRA.chain$productive)
TRA.productive <- nrow(TRA.chain[TRA.chain$productive] == "True")
TRA.productive <- nrow(TRA.chain[TRA.chain$productive == "False",])
TRA.productive <- nrow(TRA.chain[TRA.chain$productive == "True",])
recovered.runs
file_list[1]
recovered.runs <- stringr::str_split(file_list, "/", simplify = TRUE)[,8]
recovered.runs <- stringr::str_split(file_list, "/", simplify = TRUE)[,9]
TCR.output <- NULL
for (i in seq_along(contig.list)) {
TRB.chain <- contig.list[[i]][contig.list[[i]]$chain == "TRB",]
TRB.productive <- nrow(TRB.chain[TRB.chain$productive == "True",])
TRB.unproductive <- nrow(TRB.chain[TRB.chain$productive == "False",])
TRA.chain <- contig.list[[i]][contig.list[[i]]$chain == "TRA",]
TRA.productive <- nrow(TRA.chain[TRA.chain$productive == "True",])
TRA.unproductive <- nrow(TRA.chain[TRA.chain$productive == "False",])
tmp <- c(recovered.runs[i], TRB.productive, TRB.unproductive, TRA.productive, TRB.unproductive)
TCR.output <- rbind(TCR.output, tmp)
}
View(TCR.output)
TCR.output <- NULL
for (i in seq_along(contig.list)) {
TRB.chain <- contig.list[[i]][contig.list[[i]]$chain == "TRB",]
TRB.productive <- nrow(TRB.chain[TRB.chain$productive == "True",])
TRB.unproductive <- nrow(TRB.chain[TRB.chain$productive == "False",])
TRA.chain <- contig.list[[i]][contig.list[[i]]$chain == "TRA",]
TRA.productive <- nrow(TRA.chain[TRA.chain$productive == "True",])
TRA.unproductive <- nrow(TRA.chain[TRA.chain$productive == "False",])
tmp <- c(recovered.runs[i], TRB.productive, TRB.unproductive, TRA.productive, TRA.unproductive)
TCR.output <- rbind(TCR.output, tmp)
}
TCR.output <- as.data.frame(TCR.output)
colnames(TCR.output) <- c("samples","TRB.productive", "TRB.unproductive", "TRA.productive", "TRA.unproductive")
rownames(TCR.output) <- NULL
clinical.info <- readxl::read_xlsx("/Volumes/GoogleDrive/Other\ computers/iMac/utility/summaryInfo/sample.directory.xlsx")
View(clinical.info)
TCR.output <- merge(TCR.output, clinical.info, by = 1)
View(TCR.output)
TCR.output <- NULL
for (i in seq_along(contig.list)) {
TRB.chain <- contig.list[[i]][contig.list[[i]]$chain == "TRB",]
TRB.productive <- nrow(TRB.chain[TRB.chain$productive == "True",])
TRB.unproductive <- nrow(TRB.chain[TRB.chain$productive == "False",])
TRA.chain <- contig.list[[i]][contig.list[[i]]$chain == "TRA",]
TRA.productive <- nrow(TRA.chain[TRA.chain$productive == "True",])
TRA.unproductive <- nrow(TRA.chain[TRA.chain$productive == "False",])
tmp <- c(recovered.runs[i], TRB.productive, TRB.unproductive, TRA.productive, TRA.unproductive)
TCR.output <- rbind(TCR.output, tmp)
}
TCR.output <- as.data.frame(TCR.output)
colnames(TCR.output) <- c("samples","TRB.productive", "TRB.unproductive", "TRA.productive", "TRA.unproductive")
rownames(TCR.output) <- NULL
clinical.info <- readxl::read_xlsx("/Volumes/GoogleDrive/Other\ computers/iMac/utility/summaryInfo/sample.directory.xlsx")
TCR.output$samples
"%!in%" <- Negate("%in%")
TCR.output$samples[TCR.output$samples %!in% clinical.info$SampleLabel]
TCR.output <- merge(TCR.output, clinical.info, by = 1)
library(ggplot2)
TCR.output <- NULL
for (i in seq_along(contig.list)) {
TRB.chain <- contig.list[[i]][contig.list[[i]]$chain == "TRB",]
TRB.productive <- nrow(TRB.chain[TRB.chain$productive == "True",])
TRB.unproductive <- nrow(TRB.chain[TRB.chain$productive == "False",])
TRA.chain <- contig.list[[i]][contig.list[[i]]$chain == "TRA",]
TRA.productive <- nrow(TRA.chain[TRA.chain$productive == "True",])
TRA.unproductive <- nrow(TRA.chain[TRA.chain$productive == "False",])
tmp <- c(recovered.runs[i], TRB.productive, TRB.unproductive, TRA.productive, TRA.unproductive)
TCR.output <- rbind(TCR.output, tmp)
}
TCR.output <- as.data.frame(TCR.output)
colnames(TCR.output) <- c("samples","TRB.productive", "TRB.unproductive", "TRA.productive", "TRA.unproductive")
rownames(TCR.output) <- NULL
TCR.output <- reshape2::melt(TCR.output)
TCR.output <- NULL
for (i in seq_along(contig.list)) {
TRB.chain <- contig.list[[i]][contig.list[[i]]$chain == "TRB",]
TRB.productive <- nrow(TRB.chain[TRB.chain$productive == "True",])
TRB.unproductive <- nrow(TRB.chain[TRB.chain$productive == "False",])
TRA.chain <- contig.list[[i]][contig.list[[i]]$chain == "TRA",]
TRA.productive <- nrow(TRA.chain[TRA.chain$productive == "True",])
TRA.unproductive <- nrow(TRA.chain[TRA.chain$productive == "False",])
tmp <- c(recovered.runs[i], TRB.productive, TRB.unproductive, TRA.productive, TRA.unproductive)
TCR.output <- rbind(TCR.output, tmp)
}
TCR.output <- as.data.frame(TCR.output)
colnames(TCR.output) <- c("samples","TRB.productive", "TRB.unproductive", "TRA.productive", "TRA.unproductive")
rownames(TCR.output) <- NULL
TCR.output <- reshape2::melt(TCR.output, id.vars = "samples")
TCR.output <- merge(TCR.output, clinical.info, by = 1)
ggplot(TCR.output, aes(x=tissue, y=value)) +
geom_bar(position = "fill", aes(fill = variable))
ggplot(TCR.output, aes(x=Tissue, y=value)) +
geom_bar(position = "fill", aes(fill = variable))
ggplot(TCR.output, aes(x=Tissue, y=value)) +
geom_bar(stat = "identity", position = "fill", aes(fill = variable))
ggplot(TCR.output, aes(x=Tissue, y=ad.numeric(value))) +
geom_bar(stat = "identity", position = "fill", aes(fill = variable))
ggplot(TCR.output, aes(x=Tissue, y=as.numeric(value))) +
geom_bar(stat = "identity", position = "fill", aes(fill = variable))
TCR.output$chain <- stringr::str_split(TCR.output$variable, "[.]", simplify = TRUE)[,1]
ggplot(TCR.output, aes(x=Tissue, y=as.numeric(value))) +
geom_bar(stat = "identity", position = "fill", aes(fill = variable)) +
facet_grid(chain ~ Type)
ggplot(TCR.output, aes(x=Tissue, y=as.numeric(value))) +
stat_summary(fun = "median", geom = "bar", position = "fill", aes(fill = variable)) +
facet_grid(chain ~ Type)
ggplot(TCR.output, aes(x=Tissue, y=as.numeric(value))) +
stat_summary(fun = "median", geom = "bar", position = "fill", aes(fill = variable)) +
facet_grid(~Type)
ggplot(TCR.output, aes(x=Tissue, y=as.numeric(value))) +
stat_summary(fun = "median", geom = "bar", position = "fill", aes(fill = variable)) +
facet_grid(Type~.)
ggplot(subset(TCR.output, chain = "TRA"), aes(x=Tissue, y=as.numeric(value))) +
stat_summary(fun = "median", geom = "bar", position = "fill", aes(fill = variable)) +
facet_grid(Type~.)
ggplot(subset(TCR.output, chain == "TRA"), aes(x=Tissue, y=as.numeric(value))) +
stat_summary(fun = "median", geom = "bar", position = "fill", aes(fill = variable)) +
facet_grid(Type~.)
ggplot(subset(TCR.output, chain == "TRA"), aes(x=Tissue, y=as.numeric(value))) +
stat_summary(fun = "median", geom = "bar", position = "fill", aes(fill = variable, group = Type)) +
ggplot(subset(TCR.output, chain == "TRA"), aes(x=Tissue, y=as.numeric(value))) +
stat_summary(fun = "median", geom = "bar", position = "fill", aes(fill = variable, group = Type))
ggplot(subset(TCR.output, chain == "TRA"), aes(x=Tissue, y=as.numeric(value))) +
stat_summary(fun = "median", geom = "bar", position = "fill", aes(fill = variable)) +
facet_grid(Type~.) +
length(unique(TCR.output$samples))
table(TCR.output$Type)
ggplot(subset(TCR.output, chain == "TRA" & Type %in% c("Tumor", "Blood", "Normal")), aes(x=Tissue, y=as.numeric(value))) +
stat_summary(fun = "median", geom = "bar", position = "fill", aes(fill = variable)) +
facet_grid(Type~.)
ggplot(subset(TCR.output, chain == "TRA" & Type %in% c("Tumor", "Blood", "Normal")), aes(x=Tissue, y=as.numeric(value))) +
stat_summary(fun = "median", geom = "bar", position = "fill", aes(fill = variable)) +
facet_grid(Type~.)   +
theme_classic()
ggplot(subset(TCR.output, chain == "TRB" & Type %in% c("Tumor", "Blood", "Normal")), aes(x=Tissue, y=as.numeric(value))) +
stat_summary(fun = "median", geom = "bar", position = "fill", aes(fill = variable)) +
facet_grid(Type~.) +
theme_classic()
TCR.output <- NULL
for (i in seq_along(contig.list)) {
TRB.chain <- contig.list[[i]][contig.list[[i]]$chain == "TRB",]
TRB.productive <- nrow(TRB.chain[TRB.chain$productive == "True",])
TRB.unproductive <- nrow(TRB.chain[TRB.chain$productive == "False",])
TRA.chain <- contig.list[[i]][contig.list[[i]]$chain == "TRA",]
TRA.productive <- nrow(TRA.chain[TRA.chain$productive == "True",])
TRA.unproductive <- nrow(TRA.chain[TRA.chain$productive == "False",])
tmp <- c(recovered.runs[i], TRB.productive, TRB.unproductive, TRA.productive, TRA.unproductive)
TCR.output <- rbind(TCR.output, tmp)
}
setwd("~/Documents/GitHub/scRepertoire")
setwd("~/Documents/GitHub/ClamBake")
source("~/Documents/GitHub/ClamBake/R/load.data.R")
source("~/Documents/GitHub/ClamBake/R/merge.data.R")
source("~/Documents/GitHub/ClamBake/R/utils.R")
source("~/Documents/GitHub/ClamBake/R/plot.interval.EE.R")
dir.to.use <- "./data_sets/2021-10-01\ RG\ mCre/cage_data/"
meta.file <- "./data_sets/2021-10-01\ RG\ mCre/meta.csv"
meta <- read.csv(meta.file)
dat.UCP <- load.data(file.dir = dir.to.use,
meta.file = meta.file)
for (i in seq_along(dat.UCP[[1]])) {
dat.UCP[[1]][[i]]$Weight <- dat.UCP[[2]][i,"Weight"]
dat.UCP[[1]][[i]]$Lean.Mass <- dat.UCP[[2]][i,"Lean.mass"]
dat.UCP[[1]][[i]]$Fat.Mass <- dat.UCP[[2]][i,"Fat.mass"]
dat.UCP[[1]][[i]] <- dat.UCP[[1]][[i]][,-c(31,32)]
}
for (i in seq_len(length(dat.UCP[[1]]))) {
plot.interval.EE(dat.UCP,
by.proportion = FALSE,
sample.subset = names(dat.UCP[[1]])[i])
ggsave(paste0("./output/10.1.cage", str_split(names(dat.UCP[[1]])[i], "[.]", simplify = TRUE)[,2], "_", dat.UCP[[2]]$Comments[i], ".pdf"), height = 3, width = 5)
plot.interval.EE(dat.UCP,
by.proportion = TRUE,
sample.subset = names(dat.UCP[[1]])[i])
ggsave(paste0("./output/10.1.cage", str_split(names(dat.UCP[[1]])[i], "[.]", simplify = TRUE)[,2], "_", dat.UCP[[2]]$Comments[i], ".proportion.pdf"), height = 3, width = 5)
}
dir.to.use <- "./data_sets/2022-07-25 Taku/cage_data/"
meta.file <- "./data_sets/2022-07-25 Taku/meta.csv"
meta <- read.csv(meta.file)
dat.Taku <- load.data(file.dir = dir.to.use,
meta.file = meta.file)
for (i in seq_along(dat.Taku[[1]])) {
dat.Taku[[1]][[i]]$Weight <- dat.Taku[[2]][i,"Weight"]
dat.Taku[[1]][[i]]$Lean.Mass <- dat.Taku[[2]][i,"Lean.mass"]
dat.Taku[[1]][[i]]$Fat.Mass <- dat.Taku[[2]][i,"Fat.mass"]
dat.Taku[[1]][[i]] <- dat.Taku[[1]][[i]][,-c(31,32)]
#Subsetting only the last couple of days
dat.Taku[[1]][[i]] <- dat.Taku[[1]][[i]][c(2860:nrow(dat.Taku[[1]][[i]])),]
}
x <- dat.Taku[[1]][[i]]
for (i in seq_len(length(dat.Taku [[1]]))) {
plot.interval.EE(dat.Taku ,
by.proportion = FALSE,
sample.subset = names(dat.Taku [[1]])[i])
ggsave(paste0("./output/7.25.cage", str_split(names(dat.Taku[[1]])[i], "[.]", simplify = TRUE)[,2], "_", dat.Taku [[2]]$Comments[i], ".pdf"), height = 3, width = 5)
plot.interval.EE(dat.Taku ,
by.proportion = TRUE,
sample.subset = names(dat.Taku [[1]])[i])
ggsave(paste0("./output/7.25.cage", str_split(names(dat.Taku[[1]])[i], "[.]", simplify = TRUE)[,2], "_", dat.Taku[[2]]$Comments[i], ".proportion.pdf"), height = 3, width = 5)
}
dir.to.use <- "./data_sets/2021-03-30\ UCP1/cage_data/"
meta.file <- "./data_sets/2021-03-30\ UCP1/meta.csv"
meta <- read.csv(meta.file)
dat.UCP <- load.data(file.dir = dir.to.use,
meta.file = meta.file)
for (i in seq_along(dat.UCP[[1]])) {
dat.UCP[[1]][[i]]$Weight <- dat.UCP[[2]][i,"Weight"]
dat.UCP[[1]][[i]]$Lean.Mass <- dat.UCP[[2]][i,"Lean.mass"]
dat.UCP[[1]][[i]]$Fat.Mass <- dat.UCP[[2]][i,"Fat.mass"]
dat.UCP[[1]][[i]] <- dat.UCP[[1]][[i]][,-c(31,32)]
}
for (i in seq_len(length(dat.UCP[[1]]))) {
plot.interval.EE(dat.UCP,
by.proportion = FALSE,
sample.subset = names(dat.UCP[[1]])[i])
ggsave(paste0("./output/3.30.cage", str_split(names(dat.UCP[[1]])[i], "[.]", simplify = TRUE)[,2], "_", dat.UCP[[2]]$Comments[i], ".pdf"), height = 3, width = 5)
plot.interval.EE(dat.UCP,
by.proportion = TRUE,
sample.subset = names(dat.UCP[[1]])[i])
ggsave(paste0("./output/3.30.cage", str_split(names(dat.UCP[[1]])[i], "[.]", simplify = TRUE)[,2], "_", dat.UCP[[2]]$Comments[i], ".proportion.pdf"), height = 3, width = 5)
}
cage.data <- dat.UCP
sample.subset = names(dat.UCP[[1]])[i]
by.proportion = FALSE
model.spline <- readRDS( "./models/model.spline.rds")
model.rf <- readRDS("./models/model.rf.rds")
model.glm <- readRDS("./models/model.glm.rds")
if(!is.null(sample.subset)) {
cage.data <- subset.data(cage.data, sample.subset)
}
pre.plot.dat <- dplyr::bind_rows(cage.data[[1]])
indep.vairables <- pre.plot.dat[,c("Feed", "Drink", "Heat", "Fat.Mass", "Lean.Mass", "Interval_num")]
indep.vairables <- indep.vairables %>%
mutate("Ambulation" = sqrt(pre.plot.dat$Xamb^2 + pre.plot.dat$Yamb^2))
indep.vairables <- na.omit(indep.vairables)
outliers <- NULL
for(i in c(1:3,7)) {
x <- EnvStats::rosnerTest(as.matrix(indep.vairables[,i]), k = 10)$all.stats
x <- x[x$Value >= 1,]
x <- x[x$Outlier == TRUE,]
x <- x$Obs.Num
outliers <- c(outliers, x)
}
outliers <- unique(outliers)
if (length(outliers) > 0) {
indep.vairables <- indep.vairables[-outliers,]
}
indep.vairables[,"Ambulation"] <- sqrt(indep.vairables[,"Ambulation"])
View(indep.vairables)
indep.vairables[,"Ambulation"] <- sqrt(indep.vairables[,"Ambulation"])
outliers <- unique(outliers)
outliers <- na.omit(unique(outliers))
for (i in seq_len(length(dat.UCP[[1]]))) {
plot.interval.EE(dat.UCP,
by.proportion = FALSE,
sample.subset = names(dat.UCP[[1]])[i])
ggsave(paste0("./output/3.30.cage", str_split(names(dat.UCP[[1]])[i], "[.]", simplify = TRUE)[,2], "_", dat.UCP[[2]]$Comments[i], ".pdf"), height = 3, width = 5)
plot.interval.EE(dat.UCP,
by.proportion = TRUE,
sample.subset = names(dat.UCP[[1]])[i])
ggsave(paste0("./output/3.30.cage", str_split(names(dat.UCP[[1]])[i], "[.]", simplify = TRUE)[,2], "_", dat.UCP[[2]]$Comments[i], ".proportion.pdf"), height = 3, width = 5)
}
library(ggplot2)
library(viridis)
library(dplyr)
library(matrixStats)
plot.interval.EE <- function(cage.data,
sample.subset = NULL,
by.proportion = FALSE) {
model.spline <- readRDS( "./models/model.spline.rds")
model.rf <- readRDS("./models/model.rf.rds")
model.glm <- readRDS("./models/model.glm.rds")
if(!is.null(sample.subset)) {
cage.data <- subset.data(cage.data, sample.subset)
}
pre.plot.dat <- dplyr::bind_rows(cage.data[[1]])
indep.vairables <- pre.plot.dat[,c("Feed", "Drink", "Heat", "Fat.Mass", "Lean.Mass", "Interval_num")]
indep.vairables <- indep.vairables %>%
mutate("Ambulation" = sqrt(pre.plot.dat$Xamb^2 + pre.plot.dat$Yamb^2))
indep.vairables <- na.omit(indep.vairables)
outliers <- NULL
for(i in c(1:3,7)) {
x <- EnvStats::rosnerTest(as.matrix(indep.vairables[,i]), k = 10)$all.stats
x <- x[x$Value >= 1,]
x <- x[x$Outlier == TRUE,]
x <- x$Obs.Num
outliers <- c(outliers, x)
}
outliers <- na.omit(unique(outliers))
if (length(outliers) > 0) {
indep.vairables <- indep.vairables[-outliers,]
}
indep.vairables[,"Ambulation"] <- sqrt(indep.vairables[,"Ambulation"])
indep.vairables <- indep.vairables[indep.vairables$Heat > 6,]
heat.rf <- predict(model.rf, indep.vairables)
heat.spline<- suppressWarnings(npreg::predict.sm(model.spline, indep.vairables))
heat.spline[heat.spline < 0] <- NA
heat.glm <- predict(model.glm, indep.vairables)
indep.vairables <- data.frame(indep.vairables, heat.spline, heat.rf, heat.glm)
indep.vairables$heat.mean <- rowMedians(as.matrix(indep.vairables[,c("heat.spline", "heat.rf", "heat.glm")]), na.rm = TRUE)
indep.vairables$SF <- indep.vairables$heat.mean/indep.vairables$Heat
indep.vairables$Ambulatory.EE <- (indep.vairables$Ambulation*0.3228)#/indep.vairables$SF
indep.vairables$ThermicEffect.EE <- (indep.vairables$Feed*8.4165)#/indep.vairables$SF
indep.vairables$Adaptive.EE <- indep.vairables$Heat - indep.vairables$heat.mean
indep.vairables$Adaptive.EE[indep.vairables$Adaptive.EE < 0] <- 0
#indep.vairables$BMR.EE <- indep.vairables$heat.mean/indep.vairables$SF - (indep.vairables$Adaptive.EE + 8.8652 + 0.6976*indep.vairables$Weight)
indep.vairables$BMR.EE <- indep.vairables$Heat - (indep.vairables$Adaptive.EE + indep.vairables$Ambulatory.EE + indep.vairables$ThermicEffect.EE)
rho <- cor.test(indep.vairables$Heat, indep.vairables$heat.mean)
annotations <- data.frame(
xpos = c(-Inf),
ypos =  c(Inf),
annotateText = c(paste0("Thermoneutral rho = ", round(rho$estimate, 3))),
hjustvar = c(-0.05) ,
vjustvar = c(1))
#indep.vairables <- na.omit(indep.vairables)
EE.summary <- indep.vairables %>%
group_by(Interval_num) %>%
summarise(across(c(3,8:15), mean)) %>%
as.data.frame()
melted <- reshape2::melt(EE.summary[,c(1,7:10)], id.vars = 1)
melted$variable <- factor(melted$variable, levels = c("Adaptive.EE", "Ambulatory.EE", "ThermicEffect.EE", "BMR.EE"))
plot <- ggplot(melted, aes(x=as.numeric(Interval_num), y =as.numeric(value))) +
scale_fill_viridis(option = "H", discrete = TRUE, direction = -1) +
theme_classic() +
ylab("Heat") +
xlab("Time Interval")
if(by.proportion) {
plot <- plot + geom_bar(aes(fill = variable), stat = "identity", position = "fill")
} else {
plot <- plot + geom_bar(aes(fill = variable), stat = "identity")
}
plot <- plot + geom_text(data=annotations,aes(x=xpos,y=ypos,hjust=hjustvar,vjust=vjustvar,label=annotateText), size = 2)
return(plot)
}
for (i in seq_len(length(dat.UCP[[1]]))) {
plot.interval.EE(dat.UCP,
by.proportion = FALSE,
sample.subset = names(dat.UCP[[1]])[i])
ggsave(paste0("./output/3.30.cage", str_split(names(dat.UCP[[1]])[i], "[.]", simplify = TRUE)[,2], "_", dat.UCP[[2]]$Comments[i], ".pdf"), height = 3, width = 5)
plot.interval.EE(dat.UCP,
by.proportion = TRUE,
sample.subset = names(dat.UCP[[1]])[i])
ggsave(paste0("./output/3.30.cage", str_split(names(dat.UCP[[1]])[i], "[.]", simplify = TRUE)[,2], "_", dat.UCP[[2]]$Comments[i], ".proportion.pdf"), height = 3, width = 5)
}
list <- readRDS("./processedData/Fullintegrated_seuratObjects_Tcells.rds")
head(list[[]]]])
head(list[[]]])
head(list[[]])
list$compare <- paste0(list$donor, "_", list$tissue)
table(list$compare)
scatterClonotype(list,
split.by = "compare",
cloneCall ="gene",
x.axis = "368-01a_LN",
y.axis = "368-01a_PB",
dot.size = "total",
graph = "proportion")
library(scRepertoire)
scatterClonotype(list,
split.by = "compare",
cloneCall ="gene",
x.axis = "368-01a_LN",
y.axis = "368-01a_PB",
dot.size = "total",
graph = "proportion")
scatterClonotype(list,
split.by = "compare",
cloneCall ="aa",
x.axis = "368-01a_LN",
y.axis = "368-01a_PB",
dot.size = "total",
graph = "proportion")
ggsave("/output/368-01a_scatter.pdf", height = 4, width = 5.5)
ggsave("./output/368-01a_scatter.pdf", height = 4, width = 5.5)
scatterClonotype(list,
split.by = "compare",
cloneCall ="aa",
x.axis = "368-01a_LN",
y.axis = "368-01a_PB",
dot.size = "total")
scatterClonotype(list,
split.by = "compare",
cloneCall ="aa",
x.axis = "368-22_LN",
y.axis = "368-22_PB",
dot.size = "total")
ggsave("./output/368-22_scatter.pdf", height = 4, width = 5.5)
mycolors <- colorRampPalette(brewer.pal(12,"Paired"))(length(unique(df$leiden.clusters)))
library(RColorBrewer)
ColorRampPalette(brewer.pal(12,"Paired"))(7)
library(colorRamps)
library(colorRamps)
ColorRampPalette(brewer.pal(12,"Paired"))(7)
colorRampPalette(brewer.pal(12,"Paired"))(7)
brewer.pal(11, "RdYlBu")
