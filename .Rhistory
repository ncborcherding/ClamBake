tmp <- bind_rows(df)
View(df)
df <- combined
df <- list.input.return(df, split.by = split.by)
df <- checkList(df)
df <- checkBlanks(df, cloneCall)
tmp <- bind_rows(df)
group.by <- "ID"
tmp <- split(tmp, tmp[,group.by])
View(tmp)
#' to group the new list. NULL will return clusters.
#' @param exportTable Exports a table of the data into the global
#' environment in addition to the visualization
#'
#' @import ggplot2
#' @importFrom stringr str_sort
#' @importFrom reshape2 melt
#'
#' @export
#' @return ggplot of the space occupied by the specific rank of clonotypes
clonalProportion <- function(df,
split = c(10, 100, 1000, 10000, 30000, 100000),
cloneCall = "strict",
chain = "both",
group.by = NULL,
split.by = NULL,
exportTable = FALSE) {
Con.df <- NULL
df <- list.input.return(df, split.by = split.by)
cloneCall <- theCall(cloneCall)
df <- checkList(df)
df <- checkBlanks(df, cloneCall)
if(!is.null(group.by)) {
df <- groupList(df, group.by)
}
mat <- matrix(0, length(df), length(split), dimnames = list(names(df),
paste0('[', c(1, split[-length(split)] + 1), ':', split, ']')))
if (chain != "both") {
for (x in seq_along(df)) {
df[[x]] <- off.the.chain(df[[x]], chain, cloneCall)
}
}
df <- lapply(df, '[[', cloneCall)
df <- lapply(df, na.omit)
df <- lapply(df, as.data.frame(table))
for (i in seq_along(df)) {
df[[i]] <- rev(sort(as.numeric(df[[i]][,2])))
}
cut <- c(1, split[-length(split)] + 1)
for (i in seq_along(split)) {
mat[,i] <- vapply(df, function (x) sum(na.omit(x[cut[i]:split[i]])),
FUN.VALUE = numeric(1))
}
if (exportTable == TRUE) {
return(mat)
}
mat_melt <- melt(mat)
col <- length(unique(mat_melt$Var2))
plot <- ggplot(mat_melt, aes(x=as.factor(Var1), y=value, fill=Var2)) +
geom_bar(stat = "identity", position="fill",
color = "black", lwd= 0.25) +
scale_fill_manual(name = "Clonal Indices",
values = colorblind_vector(col)) +
xlab("Samples") +
ylab("Occupied Repertoire Space") +
theme_classic()
return(plot)
}
clonalProportion(combined, cloneCall = "gene", group.by = "ID")
groupList <- function(df, group.by) {
df <- bind_rows(df)
df <- split(df, df[,group.by])
return(df)
}
clonalProportion(combined, cloneCall = "gene", group.by = "ID")
library(reshape2)
library(stringr)
clonalProportion(combined, cloneCall = "gene", group.by = "ID")
#This is the basic color palette for the package
colorblind_vector <- colorRampPalette(rev(c("#0D0887FF", "#47039FFF", "#7301A8FF", "#9C179EFF",
"#BD3786FF", "#D8576BFF","#ED7953FF","#FA9E3BFF", "#FDC926FF", "#F0F921FF")))
clonalProportion(combined, cloneCall = "gene", group.by = "ID")
devtools::document()
devtools::check()
BiocCheck::BiocCheck()
#Might need to install these from CRAN or BioConductor
suppressMessages({
library(stringr)
library(dplyr)
library(survival)
library(survminer)
library(IOBR)
library(UCell)
})
#Loading the RNA
OAK.RNA <- read.csv("anonymized_OAK-TPMs2.csv")
POPLAR.RNA <- read.csv("anonymized_POPLAR-TPMs2_n192.csv")
#Loading the modified clinical data
OAK.clinical <- readRDS("OAK.clinical.rds")
POPLAR.clinical <- readRDS("POPLAR.clinical.rds")
OAK.CIBER <- readRDS("OAK.CIBER.rds")
POPLAR.CIBER <- readRDS("POPLAR.CIBER.rds")
source("./R/add.CIBER.R")
View(OAK.CIBER)
OAK.CIBER -> CIBER.data
prop.cutpoint = 0
filtered.CIBER <- CIBER.data[CIBER.data[,cell.type] > prop.cutpoint,]
colnames(CIBER.data)
cell.type = "T_cells_CD8_CIBERSORT"
filtered.CIBER <- CIBER.data[CIBER.data[,cell.type] > prop.cutpoint,]
filter.CIBER <- function(CIBER.data,
cell.type = NULL,
prop.cutpoint = 0) {
filtered.CIBER <- CIBER.data[CIBER.data[,cell.type] > prop.cutpoint,]
return(filtered.CIBER)
}
OAK.CIBER <- filtered.CIBER(OAK.CIBER,
cell.type = "T_cells_CD8_CIBERSORT",
prop.cutpoint = 0)
OAK.CIBER <- filter.CIBER(OAK.CIBER,
cell.type = "T_cells_CD8_CIBERSORT",
prop.cutpoint = 0)
POPLAR.CIBER <- filter.CIBER(POPLAR.CIBER,
cell.type = "T_cells_CD8_CIBERSORT",
prop.cutpoint = 0)
source("~/Documents/GitHub/ClamBake/R/load.data.R")
source("~/Documents/GitHub/ClamBake/R/merge.data.R")
source("~/Documents/GitHub/ClamBake/R/utils.R")
source("~/Documents/GitHub/ClamBake/R/plot.interval.EE.R")
dir.to.use <- "./data_sets/2021-10-01\ RG\ mCre/cage_data/"
meta.file <- "./data_sets/2021-10-01\ RG\ mCre/meta.csv"
meta <- read.csv(meta.file)
dat.UCP <- load.data(file.dir = dir.to.use,
meta.file = meta.file)
for (i in seq_along(dat.UCP[[1]])) {
dat.UCP[[1]][[i]]$Weight <- dat.UCP[[2]][i,"Weight"]
dat.UCP[[1]][[i]]$Lean.Mass <- dat.UCP[[2]][i,"Lean.mass"]
dat.UCP[[1]][[i]]$Fat.Mass <- dat.UCP[[2]][i,"Fat.mass"]
dat.UCP[[1]][[i]] <- dat.UCP[[1]][[i]][,-c(31,32)]
}
plot.interval.EE(dat.UCP,
by.proportion = TRUE,
sample.subset = names(dat.UCP[[1]])[c(1,6,9,13)],
plot.area = TRUE)
cage.data <- dat.UCP
sample.subset = names(dat.UCP[[1]])[c(1,6,9,13)]
model.spline <- readRDS( "./models/model.earth.rds")
setwd("~/Documents/GitHub/ClamBake")
model.spline <- readRDS( "./models/model.earth.rds")
model.rf <- readRDS("./models/model.rf.rds")
model.glm <- readRDS("./models/model.glm.rds")
if(!is.null(sample.subset)) {
cage.data <- subset.data(cage.data, sample.subset)
}
pre.plot.dat <- dplyr::bind_rows(cage.data[[1]])
pre.plot.dat <- pre.plot.dat[pre.plot.dat$Cage %!in% c("", "==============="),]
interval.assignments <- time.handler(pre.plot.dat)
interval.assignments2 <- as.data.frame(table(interval.assignments))
interval.assignments <- interval.assignments2 %>%
group_by(Interval_num) %>%
slice_max(order_by = Freq, n = 1, with_ties = FALSE)
interval.assignments <- interval.assignments[,1:2]
indep.vairables <- pre.plot.dat[,c("Feed", "Drink", "Heat", "Fat.Mass", "Lean.Mass", "Interval_num")]
indep.vairables <- indep.vairables %>%
mutate("Ambulation" = sqrt(pre.plot.dat$Xamb^2 + pre.plot.dat$Yamb^2))
indep.vairables <- na.omit(indep.vairables)
outliers <- NULL
for(i in c(1:3,7)) {
x <- EnvStats::rosnerTest(as.matrix(indep.vairables[,i]), k = 10)$all.stats
x <- x[x$Value >= 1,]
x <- x[x$Outlier == TRUE,]
x <- x$Obs.Num
outliers <- c(outliers, x)
}
outliers <- na.omit(unique(outliers))
if (length(outliers) > 0) {
indep.vairables <- indep.vairables[-outliers,]
}
indep.vairables[,"Ambulation"] <- sqrt(indep.vairables[,"Ambulation"])
indep.vairables <- indep.vairables[indep.vairables$Heat > 7,]
heat.rf <- predict(model.rf, indep.vairables)
heat.spline<- predict(model.spline, indep.vairables)
heat.spline[heat.spline < 0] <- NA
heat.glm <- predict(model.glm, indep.vairables)
indep.vairables <- data.frame(indep.vairables, heat.spline = as.vector(heat.spline), heat.rf, heat.glm)
indep.vairables$heat.mean <- rowMedians(as.matrix(indep.vairables[,c("heat.spline", "heat.rf", "heat.glm")]), na.rm = TRUE)
######################
#General Calculations
#####################
SF <- indep.vairables$heat.mean/indep.vairables$Heat
#SF <- ifelse(SF < 1, 1-(SF/2), SF)
#SF <- ifelse(SF > 1, 1-(1-SF)/2, SF)
indep.vairables$SF <- SF
#Tendency to overestimate BMR if we do not use the scale factor
indep.vairables$Ambulatory.EE <- (indep.vairables$Ambulation*0.3228)/indep.vairables$SF
indep.vairables$ThermicEffect.EE <- (indep.vairables$Feed*8.4165)/indep.vairables$SF
indep.vairables$Adaptive.EE <- indep.vairables$Heat - indep.vairables$heat.mean
indep.vairables$Adaptive.EE[indep.vairables$Adaptive.EE < 0] <- 0
indep.vairables$BMR.EE <- indep.vairables$Heat - (indep.vairables$Adaptive.EE + indep.vairables$Ambulatory.EE + indep.vairables$ThermicEffect.EE)
#Impute mean BMR if estimated BMR > or < 1.5 z.score
median.BMR <- mean(indep.vairables$BMR.EE, na.rm = T)
sd.BMR <- sd(indep.vairables$BMR.EE)
BMR.position <- which(indep.vairables$BMR.EE > median.BMR+1.5*sd.BMR | indep.vairables$BMR.EE < median.BMR-1.5*sd.BMR)
indep.vairables$BMR.EE[BMR.position] <- median.BMR
rho <- cor.test(indep.vairables$Heat, indep.vairables$heat.mean)
annotations <- data.frame(
xpos = c(-Inf),
ypos =  c(Inf),
annotateText = c(paste0("Thermoneutral rho = ", round(rho$estimate, 3))),
hjustvar = c(-0.05) ,
vjustvar = c(1))
#indep.vairables <- na.omit(indep.vairables)
EE.summary <- indep.vairables %>%
group_by(Interval_num) %>%
summarise(across(c(3,8:15), mean)) %>%
as.data.frame()
melted <- reshape2::melt(EE.summary[,c(1,7:10)], id.vars = 1)
melted <- merge(melted, interval.assignments, by = 1)
melted$variable <- factor(melted$variable, levels = c("Adaptive.EE", "Ambulatory.EE", "ThermicEffect.EE", "BMR.EE"))
top.bar = 1.2 / median(table(melted$Interval_num))
plot <- ggplot(melted, aes(x=as.numeric(Interval_num), y =as.numeric(value))) +
stat_summary(data = subset(melted, time.cycle == "night"),
geom = "bar",
fun = sum,
mapping = aes(x=as.numeric(Interval_num), y =top.bar),
color = "grey",
lwd = 0,
alpha = 0.5) +
scale_fill_viridis(option = "H", discrete = TRUE, direction = -1) +
theme_classic() +
ylab("Heat") +
xlab("Time Interval")
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = 'gam',
position = "fill",
aes(fill = variable))
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = 'gam',
position = "stack",
aes(fill = variable))
View(melted)
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = 'gam',
position = "fill",
span = 1/3,
aes(fill = variable))
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = 'gam',
position = "fill",
span = 2,
aes(fill = variable))
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = 'gam',
position = "fill",
span = 5,
aes(fill = variable))
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = 'gam',
position = "fill",
span = 20,
aes(fill = variable))
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = 'gam',
position = "fill",
span = 0.1,
aes(fill = variable))
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
position = "fill",
span = 0.1,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = 'loess',
position = "fill",
span = 0.1,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = 'loess',
position = "fill",
#span = 0.1,
aes(fill = variable))
stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = 'loess',
position = "fill",
span = 0.2,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = 'loess',
position = "fill",
span = 0.2,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = lm,
formula = y ~ splines::bs(x, df = 2, degree = 2, knots = 10),
#method = 'loess',
position = "fill",
span = 0.2,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = lm,
formula = y ~ splines::bs(x, df = 2, degree = 4),
#method = 'loess',
position = "fill",
span = 0.2,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = lm,
formula = y ~ splines::bs(x, df = 10, degree = 4),
#method = 'loess',
position = "fill",
span = 0.2,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = lm,
formula = y ~ splines::bs(x, df = 10, degree = 2),
#method = 'loess',
position = "fill",
span = 0.2,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = lm,
formula = y ~ splines::bs(x, df = 10, degree = 2),
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = lm,
formula = y ~ splines::bs(x, df = 100, degree = 2),
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = lm,
formula = y ~ splines::bs(x, df = 20, degree = 2),
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = lm,
formula = y ~ splines::bs(x, df = 20, degree = 100),
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = lm,
formula = y ~ splines::bs(x, df = 20, degree = 20),
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = lm,
formula = y ~ splines::bs(x, df = 20, degree = 1),
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = loess,
formula = y ~ splines::bs(x, df = 20, degree = 1),
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = loess,
formula = y ~ x,
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = gam,
formula = y ~ s(x)
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = gam,
formula = y ~ s(x),
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = "gam",
formula = y ~ s(x),
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = "gam",
formula = y ~ s(x, k = 3),
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = "gam",
formula = y ~ s(x, k = 1),
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = "gam",
formula = y ~ s(x, k = 2),
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(#formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = "gam",
formula = y ~ s(x, k = 10),
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = "gam",
#method = 'loess',
position = "fill",
span = 0.5,
aes(fill = variable))
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = "gam",
#method = 'loess',
position = "fill",
span = 0.3,
aes(fill = variable))
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = "gam",
#method = 'loess',
position = "fill",
span = 0.3,
aes(fill = variable)) +
ylim(0,1.2)
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = "gam",
#method = 'loess',
position = "fill",
span = 0.3,
aes(fill = variable)) +
ylim(-0.1,1.2)
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = "gam",
#method = 'loess',
position = "fill",
span = 0.3,
aes(fill = variable))
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = "gam",
#method = 'loess',
#position = "fill",
span = 0.3,
aes(fill = variable))
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = "gam",
#method = 'loess',
#position = "fill",
span = 0.3,
aes(fill = rev(variable)))
plot +stat_smooth(formula = y ~ s(x, bs = "cs"),
geom = 'area',
method = "gam",
#method = 'loess',
position = "fill",
span = 0.3,
aes(fill = variable))
